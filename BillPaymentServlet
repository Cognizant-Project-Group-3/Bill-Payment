package com.billpayment.controller;

import java.io.IOException;
import java.io.PrintWriter;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import com.billpayment.BO.BillPaymentBO;
import com.billpayment.BO.CustomerBO;
import com.billpayment.entity.Customer;
import com.billpayment.exception.DatabaseException;

/**
 * Servlet implementation class BillPaymentServlet
 */
public class BillPaymentServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;

	/**
	 * @see HttpServlet#HttpServlet()
	 */
	public BillPaymentServlet() {
		super();
		// TODO Auto-generated constructor stub
	}

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse
	 *      response)
	 */
	protected void doGet(HttpServletRequest request,
			HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		doPost(request, response);
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse
	 *      response)
	 */
	protected void doPost(HttpServletRequest request,
			HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		HttpSession session = request.getSession();
		if (session.getAttribute("username") == null) {
			response.sendRedirect("index_pro.html");
		}

		PrintWriter out = response.getWriter();
		response.setContentType("text/html");

		boolean isCustomerValid = false;
		boolean isVendorValid = false;

		final int c_id = Integer.parseInt(request.getParameter("customerId"));
		final String v_name = request.getParameter("vendorname");
		final String v_type = request.getParameter("vendortype");
		final BillPaymentBO billPaymentBO = new BillPaymentBO();
		CustomerBO customerBO = new CustomerBO();

		try {

			// validate customer
			isCustomerValid = billPaymentBO.validateCustomer(c_id);
			if (isCustomerValid == false) {
				RequestDispatcher reqDispatchError = request
				.getRequestDispatcher("/error.jsp");
				request.setAttribute("message", "Invalid Customer");
				if (!response.isCommitted()) {
					reqDispatchError.forward(request, response);
					return;
				}
			}

			// validate vendor
			isVendorValid = billPaymentBO.validateVendor(v_name, v_type);
			if (isVendorValid == false && isCustomerValid != false) {
				RequestDispatcher reqDispatchError = request
				.getRequestDispatcher("/error.jsp");
				request.setAttribute("message", "Invalid Vendor");
				if (!response.isCommitted()) {
					reqDispatchError.forward(request, response);
					return;
				}
			}
			// if customer and vendor are present fetch pending amount to
			// display
			if (isVendorValid == true && isCustomerValid == true) {

				float pendingBill = billPaymentBO.getPendingAmount(c_id,
						v_name, v_type);
				if (pendingBill == 0) {
					RequestDispatcher requestDispatcher = request
					.getRequestDispatcher("/BillPayIncorrectVendor_pro.html");
					requestDispatcher.forward(request, response);
				} else {
					RequestDispatcher requestDispatcher = request
							.getRequestDispatcher("/PaymentConfirmation_pro.jsp");
					Customer customerobj = customerBO.fetchCustomerDetails(c_id);
					request.setAttribute("customerName", customerobj.getName());
					request.setAttribute("Customer_Id", c_id);
					request.setAttribute("Vendor_Name", v_name);
					request.setAttribute("Vendor_Type", v_type);
					request.setAttribute("Pending_Amount", pendingBill);
					SimpleDateFormat sdf = new SimpleDateFormat("dd/MMM/yyyy");
					Date d = new Date();
					String Current_Date = sdf.format(d);
					request.setAttribute("Current_Date", Current_Date);
					requestDispatcher.forward(request, response);
				}

			}

		} catch (DatabaseException e) {
			// TODO: handle exception
			Throwable throwable = e.getThrowable();
			RequestDispatcher reqDispatchError = request
					.getRequestDispatcher("/error.jsp");
			if (throwable instanceof ClassNotFoundException) {
				request.setAttribute("message", "Jar file for Oracle is absent");
			} else if (throwable instanceof SQLException) {
				request.setAttribute("message", "Enter Valid Customer ID!");
			}
			if (!response.isCommitted()) {
				reqDispatchError.forward(request, response);
				return;
			}
		}

	}
}
